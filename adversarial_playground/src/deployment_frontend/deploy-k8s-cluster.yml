---
- name: "Create Kubernetes Cluster and deploy multiple containers"
  hosts: localhost
  gather_facts: false

  vars:
    cluster_name: "black-knights-cluster"
    machine_type: "n2d-standard-2"
    machine_disk_size: 30
    initial_node_count: 2

  tasks:
  - name: "Create a GKE cluster"
    google.cloud.gcp_container_cluster:
      name: "{{cluster_name}}"
      initial_node_count: "{{ initial_node_count }}"
      location: "{{ gcp_zone }}"
      project: "{{ gcp_project }}"
      release_channel:
        channel: "UNSPECIFIED"
      ip_allocation_policy:
        use_ip_aliases: "yes"
      auth_kind: "{{ gcp_auth_kind }}"
      service_account_file: "{{ gcp_service_account_file }}"
      state: "{{ cluster_state }}"
    register: cluster

  - name: Copy docker tag file
    copy:
      src: .docker-tag
      dest: .docker-tag
      mode: 0644

  - name: "Get docker tag"
    shell: "cat .docker-tag"
    register: tag

  - name: Print tag
    debug:
      var: tag


  - name: "Create a Node Pool"
    google.cloud.gcp_container_node_pool:
      name: default-pool
      initial_node_count: "{{ initial_node_count }}"
      cluster: "{{ cluster }}"
      location: "{{ gcp_zone }}"
      project: "{{ gcp_project }}"
      config:
        machine_type: "{{ machine_type }}"
        image_type: "cos_containerd"
        disk_size_gb: "{{ machine_disk_size }}"
        oauth_scopes:
          - "https://www.googleapis.com/auth/devstorage.read_only"
          - "https://www.googleapis.com/auth/logging.write"
          - "https://www.googleapis.com/auth/monitoring"
          - "https://www.googleapis.com/auth/servicecontrol"
          - "https://www.googleapis.com/auth/service.management.readonly"
          - "https://www.googleapis.com/auth/trace.append"
          - "https://www.googleapis.com/auth/cloud-platform"
          - "https://www.googleapis.com/auth/cloud-platform"
      autoscaling:
        enabled: "yes"
        min_node_count: "1"
        max_node_count: "{{ initial_node_count }}"
      management:
        auto_repair: "yes"
        auto_upgrade: "yes"
      auth_kind: "{{ gcp_auth_kind }}"
      service_account_file: "{{ gcp_service_account_file }}"
      state: "{{ cluster_state }}"
  
  - name: "Connect to cluster (update kubeconfig)"
    shell: "gcloud container clusters get-credentials {{ cluster.name }} --zone {{ gcp_zone }} --project {{ gcp_project }}"
    when: cluster_state == "present"

  - name: "Create Namespace"
    k8s:
      name: "{{cluster_name}}-namespace"
      api_version: v1
      kind: Namespace
      state: present
    when: cluster_state == "present"

  - name: "Add nginx-ingress helm repo"
    community.kubernetes.helm_repository:
      name: nginx-stable
      repo_url: https://helm.nginx.com/stable
    when: cluster_state == "present"

  - name: "Install nginx-ingress"
    community.kubernetes.helm:
      name: nginx-ingress
      namespace: "{{cluster_name}}-namespace"
      chart_ref: nginx-stable/nginx-ingress
      state: present
    when: cluster_state == "present"

  - name: "Create Persistent Volume Claim"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: persistent-pvc
          namespace: "{{cluster_name}}-namespace"
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
    when: cluster_state == "present"
  
  - name: Importing credentials as a Secret
    shell: |
      #!/bin/bash
      kubectl create secret generic gcp-service-key --from-file=deployment.json=/secrets/deployment.json --namespace="{{cluster_name}}-namespace"
    register: create_secret_op
    ignore_errors: yes
    when: cluster_state == "present"
  
  - name: "Create Deployment for Frontend"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Deployment
        metadata:
          name: frontend
          namespace: "{{cluster_name}}-namespace"
        spec:
          selector:
            matchLabels:
              run: frontend
          template:
            metadata:
              labels:
                run: frontend
            spec:
              serviceAccountName: deployment
              containers:
              - image: "docker.io/{{ lookup('env', 'DOCKERHUB_USERNAME') }}/frontend-ansible:{{ tag.stdout }}"
                imagePullPolicy: IfNotPresent
                name: frontend
                ports:
                - containerPort: 3000
                  protocol: TCP
                - containerPort: 3001  # Expose port 3001
    when: cluster_state == "present"

  - name: "Create Service for Frontend"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend
          namespace: "{{cluster_name}}-namespace"
        spec:
          ports:
          - name: "http-3000"  # Name for port 3000
            port: 3000
            protocol: TCP
            targetPort: 3000
            nodePort: 32437  # Explicitly set nodePort for 3000
          - name: "http-3001"  # Name for port 3001
            port: 3001
            protocol: TCP
            targetPort: 3001
            nodePort: 32438  # Explicitly set nodePort for 3001 (different from 32437)
          selector:
            run: frontend
          type: NodePort
    when: cluster_state == "present"



  - name: Wait for Ingress Nginx to get ready
    shell: |
      #!/bin/bash
      kubectl get service nginx-ingress-controller --namespace="{{cluster_name}}-namespace" -ojson | jq -r '.status.loadBalancer.ingress[].ip'
    register: nginx_ingress
    delay: 10
    retries: 20
    until: nginx_ingress.stderr == ""
    when: cluster_state == "present"

  - name: Set Nginx Ingress IP
    set_fact:
      nginx_ingress_ip: "{{nginx_ingress.stdout}}"
    when: cluster_state == "present"

  - name: Debug Ingress Nginx IP Address
    debug:
      msg: "Ingress Nginx IP Address: {{ nginx_ingress_ip }}"
    when: cluster_state == "present"

  - name: "Create Ingress Controller"
    k8s:
      state: present
      definition:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ingress-resource
          namespace: "{{cluster_name}}-namespace"
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/ssl-redirect: "false"
            nginx.ingress.kubernetes.io/use-regex: "true"
            nginx.org/rewrites: "serviceName=frontend rewrite=/"
        spec:
          rules:
          - host: "{{ nginx_ingress_ip }}.sslip.io"  # Ensure the domain is valid
            http:
              paths:
              - path: /  # Handle traffic on port 3000
                pathType: Prefix
                backend:
                  service:
                    name: frontend
                    port:
                      number: 3000
              - path: /port3001  # Add path for port 3001
                pathType: Prefix
                backend:
                  service:
                    name: frontend
                    port:
                      number: 3001
    when: cluster_state == "present"